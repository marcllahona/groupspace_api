# import * from '../generated/prisma.graphql'
scalar DateTime

type Query {
  #Returns User profile
  me: User
  #Returns all groups that user has joined
  myGroups(
    where: GroupWhereInput
    orderBy: GroupOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Group!]!
  #Returns only groups that user has created
  myCreatedGroups(
    where: GroupWhereInput
    orderBy: GroupOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Group!]!
  #All groups that user has joined
  allGroups(
    where: GroupWhereInput
    orderBy: GroupOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Group!]!
  #Returns a single group using its ID
  groupByID(id: ID!): Group
  #Returns a single group using its ID
  groupByName(name: String!): Group

  #Returns all channels that user has joined and created
  myChannels(
    where: ChannelWhereInput
    orderBy: ChannelOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Channel!]!
  #Returns all channels that user has created
  myCreatedChannels(
    where: ChannelWhereInput
    orderBy: ChannelOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Channel!]!
  #All channels that user has joined
  allChannels(
    where: ChannelWhereInput
    orderBy: ChannelOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Channel!]!
  #Returns a single channel using its ID
  channelByID(id: ID!): Channel

  channelByGroup(channelName: String!, groupName: String!): Channel

  #Returns all messages of a channel using its ID
  channelMessages(
    id: ID!
    where: MessageWhereInput
    orderBy: MessageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Message!]!

  channelMessagesByName(
    channelName: String!
    groupName: String!
    where: MessageWhereInput
    orderBy: MessageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Message!]!

  #Returns all messages of a group using its name
  groupMessages(
    name: String!
    where: MessageWhereInput
    orderBy: MessageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Message!]!
}

type Mutation {
  login(email: String!, password: String!): AuthPayload!
  register(
    firstName: String!
    lastName: String!
    email: String!
    password: String!
  ): AuthPayload!

  createGroup(
    name: String!
    description: String!
    category: String!
    image: String
    url: String!
  ): Group!
  updateGroup(
    id: ID!
    name: String
    description: String
    category: String
    image: String
  ): Group!
  deleteGroup(id: ID!): Group!
  leaveGroup(id: ID!): Group!

  createChannel(creatorID: ID!, groupID: ID!, name: String!): Channel!
  updateChannel(id: ID!, name: String): Channel!
  deleteChannel(id: ID!): Channel!
  leaveChannel(id: ID!): Group!

  createMessage(authorID: ID!, channelID: ID!, content: String!): Message!
  createMessageByName(
    channelName: String!
    groupName: String!
    content: String!
  ): Message!
}

type Subscription {
  onCreateChannel(groupID: ID!): Channel!
  onCreateMessage(channelID: ID!): Message!
  onCreateGroupMessage(name: String!): Message!
  onCreateMessageByName(channelName: String!, groupName: String!): Message!
}

type AuthPayload {
  token: String!
  user: User!
}

#Definition of User only for the client. we prevent that any user can get hashed password.
type User {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  fullName: String!
  image: String
  groups: [Group!]!
  createdGroups: [Group!]!
  channels: [Channel!]!
  createdChannels: [Channel!]!
  messages: [Message!]!
}
