// Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  channel: (where?: ChannelWhereInput) => Promise<boolean>;
  group: (where?: GroupWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  channel: (where: ChannelWhereUniqueInput) => ChannelNullablePromise;
  channels: (args?: {
    where?: ChannelWhereInput;
    orderBy?: ChannelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Channel>;
  channelsConnection: (args?: {
    where?: ChannelWhereInput;
    orderBy?: ChannelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChannelConnectionPromise;
  group: (where: GroupWhereUniqueInput) => GroupNullablePromise;
  groups: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Group>;
  groupsConnection: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GroupConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessageNullablePromise;
  messages: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Message>;
  messagesConnection: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MessageConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createChannel: (data: ChannelCreateInput) => ChannelPromise;
  updateChannel: (args: {
    data: ChannelUpdateInput;
    where: ChannelWhereUniqueInput;
  }) => ChannelPromise;
  updateManyChannels: (args: {
    data: ChannelUpdateManyMutationInput;
    where?: ChannelWhereInput;
  }) => BatchPayloadPromise;
  upsertChannel: (args: {
    where: ChannelWhereUniqueInput;
    create: ChannelCreateInput;
    update: ChannelUpdateInput;
  }) => ChannelPromise;
  deleteChannel: (where: ChannelWhereUniqueInput) => ChannelPromise;
  deleteManyChannels: (where?: ChannelWhereInput) => BatchPayloadPromise;
  createGroup: (data: GroupCreateInput) => GroupPromise;
  updateGroup: (args: {
    data: GroupUpdateInput;
    where: GroupWhereUniqueInput;
  }) => GroupPromise;
  updateManyGroups: (args: {
    data: GroupUpdateManyMutationInput;
    where?: GroupWhereInput;
  }) => BatchPayloadPromise;
  upsertGroup: (args: {
    where: GroupWhereUniqueInput;
    create: GroupCreateInput;
    update: GroupUpdateInput;
  }) => GroupPromise;
  deleteGroup: (where: GroupWhereUniqueInput) => GroupPromise;
  deleteManyGroups: (where?: GroupWhereInput) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (args: {
    data: MessageUpdateInput;
    where: MessageWhereUniqueInput;
  }) => MessagePromise;
  updateManyMessages: (args: {
    data: MessageUpdateManyMutationInput;
    where?: MessageWhereInput;
  }) => BatchPayloadPromise;
  upsertMessage: (args: {
    where: MessageWhereUniqueInput;
    create: MessageCreateInput;
    update: MessageUpdateInput;
  }) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  channel: (
    where?: ChannelSubscriptionWhereInput
  ) => ChannelSubscriptionPayloadSubscription;
  group: (
    where?: GroupSubscriptionWhereInput
  ) => GroupSubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type GroupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "category_ASC"
  | "category_DESC"
  | "image_ASC"
  | "image_DESC"
  | "backgroundImage_ASC"
  | "backgroundImage_DESC"
  | "url_ASC"
  | "url_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "image_ASC"
  | "image_DESC";

export type ChannelOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC";

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "content_ASC"
  | "content_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ChannelWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GroupWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  creator?: Maybe<UserWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  category?: Maybe<String>;
  category_not?: Maybe<String>;
  category_in?: Maybe<String[] | String>;
  category_not_in?: Maybe<String[] | String>;
  category_lt?: Maybe<String>;
  category_lte?: Maybe<String>;
  category_gt?: Maybe<String>;
  category_gte?: Maybe<String>;
  category_contains?: Maybe<String>;
  category_not_contains?: Maybe<String>;
  category_starts_with?: Maybe<String>;
  category_not_starts_with?: Maybe<String>;
  category_ends_with?: Maybe<String>;
  category_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  backgroundImage?: Maybe<String>;
  backgroundImage_not?: Maybe<String>;
  backgroundImage_in?: Maybe<String[] | String>;
  backgroundImage_not_in?: Maybe<String[] | String>;
  backgroundImage_lt?: Maybe<String>;
  backgroundImage_lte?: Maybe<String>;
  backgroundImage_gt?: Maybe<String>;
  backgroundImage_gte?: Maybe<String>;
  backgroundImage_contains?: Maybe<String>;
  backgroundImage_not_contains?: Maybe<String>;
  backgroundImage_starts_with?: Maybe<String>;
  backgroundImage_not_starts_with?: Maybe<String>;
  backgroundImage_ends_with?: Maybe<String>;
  backgroundImage_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  participants_every?: Maybe<UserWhereInput>;
  participants_some?: Maybe<UserWhereInput>;
  participants_none?: Maybe<UserWhereInput>;
  channels_every?: Maybe<ChannelWhereInput>;
  channels_some?: Maybe<ChannelWhereInput>;
  channels_none?: Maybe<ChannelWhereInput>;
  AND?: Maybe<GroupWhereInput[] | GroupWhereInput>;
  OR?: Maybe<GroupWhereInput[] | GroupWhereInput>;
  NOT?: Maybe<GroupWhereInput[] | GroupWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  groups_every?: Maybe<GroupWhereInput>;
  groups_some?: Maybe<GroupWhereInput>;
  groups_none?: Maybe<GroupWhereInput>;
  createdGroups_every?: Maybe<GroupWhereInput>;
  createdGroups_some?: Maybe<GroupWhereInput>;
  createdGroups_none?: Maybe<GroupWhereInput>;
  channels_every?: Maybe<ChannelWhereInput>;
  channels_some?: Maybe<ChannelWhereInput>;
  channels_none?: Maybe<ChannelWhereInput>;
  createdChannels_every?: Maybe<ChannelWhereInput>;
  createdChannels_some?: Maybe<ChannelWhereInput>;
  createdChannels_none?: Maybe<ChannelWhereInput>;
  messages_every?: Maybe<MessageWhereInput>;
  messages_some?: Maybe<MessageWhereInput>;
  messages_none?: Maybe<MessageWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface ChannelWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  creator?: Maybe<UserWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  participants_every?: Maybe<UserWhereInput>;
  participants_some?: Maybe<UserWhereInput>;
  participants_none?: Maybe<UserWhereInput>;
  messages_every?: Maybe<MessageWhereInput>;
  messages_some?: Maybe<MessageWhereInput>;
  messages_none?: Maybe<MessageWhereInput>;
  group?: Maybe<GroupWhereInput>;
  AND?: Maybe<ChannelWhereInput[] | ChannelWhereInput>;
  OR?: Maybe<ChannelWhereInput[] | ChannelWhereInput>;
  NOT?: Maybe<ChannelWhereInput[] | ChannelWhereInput>;
}

export interface MessageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  channel?: Maybe<ChannelWhereInput>;
  author?: Maybe<UserWhereInput>;
  AND?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  OR?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  NOT?: Maybe<MessageWhereInput[] | MessageWhereInput>;
}

export type GroupWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export type MessageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface ChannelCreateInput {
  id?: Maybe<ID_Input>;
  creator: UserCreateOneWithoutCreatedChannelsInput;
  name: String;
  description?: Maybe<String>;
  participants?: Maybe<UserCreateManyWithoutChannelsInput>;
  messages?: Maybe<MessageCreateManyWithoutChannelInput>;
  group: GroupCreateOneWithoutChannelsInput;
}

export interface UserCreateOneWithoutCreatedChannelsInput {
  create?: Maybe<UserCreateWithoutCreatedChannelsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCreatedChannelsInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  image?: Maybe<String>;
  groups?: Maybe<GroupCreateManyWithoutParticipantsInput>;
  createdGroups?: Maybe<GroupCreateManyWithoutCreatorInput>;
  channels?: Maybe<ChannelCreateManyWithoutParticipantsInput>;
  messages?: Maybe<MessageCreateManyWithoutAuthorInput>;
}

export interface GroupCreateManyWithoutParticipantsInput {
  create?: Maybe<
    GroupCreateWithoutParticipantsInput[] | GroupCreateWithoutParticipantsInput
  >;
  connect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
}

export interface GroupCreateWithoutParticipantsInput {
  id?: Maybe<ID_Input>;
  creator: UserCreateOneWithoutCreatedGroupsInput;
  name: String;
  description: String;
  category: String;
  topics?: Maybe<GroupCreatetopicsInput>;
  image?: Maybe<String>;
  backgroundImage?: Maybe<String>;
  url?: Maybe<String>;
  channels?: Maybe<ChannelCreateManyWithoutGroupInput>;
}

export interface UserCreateOneWithoutCreatedGroupsInput {
  create?: Maybe<UserCreateWithoutCreatedGroupsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCreatedGroupsInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  image?: Maybe<String>;
  groups?: Maybe<GroupCreateManyWithoutParticipantsInput>;
  channels?: Maybe<ChannelCreateManyWithoutParticipantsInput>;
  createdChannels?: Maybe<ChannelCreateManyWithoutCreatorInput>;
  messages?: Maybe<MessageCreateManyWithoutAuthorInput>;
}

export interface ChannelCreateManyWithoutParticipantsInput {
  create?: Maybe<
    | ChannelCreateWithoutParticipantsInput[]
    | ChannelCreateWithoutParticipantsInput
  >;
  connect?: Maybe<ChannelWhereUniqueInput[] | ChannelWhereUniqueInput>;
}

export interface ChannelCreateWithoutParticipantsInput {
  id?: Maybe<ID_Input>;
  creator: UserCreateOneWithoutCreatedChannelsInput;
  name: String;
  description?: Maybe<String>;
  messages?: Maybe<MessageCreateManyWithoutChannelInput>;
  group: GroupCreateOneWithoutChannelsInput;
}

export interface MessageCreateManyWithoutChannelInput {
  create?: Maybe<
    MessageCreateWithoutChannelInput[] | MessageCreateWithoutChannelInput
  >;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
}

export interface MessageCreateWithoutChannelInput {
  id?: Maybe<ID_Input>;
  content: String;
  author: UserCreateOneWithoutMessagesInput;
}

export interface UserCreateOneWithoutMessagesInput {
  create?: Maybe<UserCreateWithoutMessagesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutMessagesInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  image?: Maybe<String>;
  groups?: Maybe<GroupCreateManyWithoutParticipantsInput>;
  createdGroups?: Maybe<GroupCreateManyWithoutCreatorInput>;
  channels?: Maybe<ChannelCreateManyWithoutParticipantsInput>;
  createdChannels?: Maybe<ChannelCreateManyWithoutCreatorInput>;
}

export interface GroupCreateManyWithoutCreatorInput {
  create?: Maybe<
    GroupCreateWithoutCreatorInput[] | GroupCreateWithoutCreatorInput
  >;
  connect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
}

export interface GroupCreateWithoutCreatorInput {
  id?: Maybe<ID_Input>;
  name: String;
  description: String;
  category: String;
  topics?: Maybe<GroupCreatetopicsInput>;
  image?: Maybe<String>;
  backgroundImage?: Maybe<String>;
  url?: Maybe<String>;
  participants?: Maybe<UserCreateManyWithoutGroupsInput>;
  channels?: Maybe<ChannelCreateManyWithoutGroupInput>;
}

export interface GroupCreatetopicsInput {
  set?: Maybe<String[] | String>;
}

export interface UserCreateManyWithoutGroupsInput {
  create?: Maybe<UserCreateWithoutGroupsInput[] | UserCreateWithoutGroupsInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutGroupsInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  image?: Maybe<String>;
  createdGroups?: Maybe<GroupCreateManyWithoutCreatorInput>;
  channels?: Maybe<ChannelCreateManyWithoutParticipantsInput>;
  createdChannels?: Maybe<ChannelCreateManyWithoutCreatorInput>;
  messages?: Maybe<MessageCreateManyWithoutAuthorInput>;
}

export interface ChannelCreateManyWithoutCreatorInput {
  create?: Maybe<
    ChannelCreateWithoutCreatorInput[] | ChannelCreateWithoutCreatorInput
  >;
  connect?: Maybe<ChannelWhereUniqueInput[] | ChannelWhereUniqueInput>;
}

export interface ChannelCreateWithoutCreatorInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  participants?: Maybe<UserCreateManyWithoutChannelsInput>;
  messages?: Maybe<MessageCreateManyWithoutChannelInput>;
  group: GroupCreateOneWithoutChannelsInput;
}

export interface UserCreateManyWithoutChannelsInput {
  create?: Maybe<
    UserCreateWithoutChannelsInput[] | UserCreateWithoutChannelsInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutChannelsInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  image?: Maybe<String>;
  groups?: Maybe<GroupCreateManyWithoutParticipantsInput>;
  createdGroups?: Maybe<GroupCreateManyWithoutCreatorInput>;
  createdChannels?: Maybe<ChannelCreateManyWithoutCreatorInput>;
  messages?: Maybe<MessageCreateManyWithoutAuthorInput>;
}

export interface MessageCreateManyWithoutAuthorInput {
  create?: Maybe<
    MessageCreateWithoutAuthorInput[] | MessageCreateWithoutAuthorInput
  >;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
}

export interface MessageCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  content: String;
  channel: ChannelCreateOneWithoutMessagesInput;
}

export interface ChannelCreateOneWithoutMessagesInput {
  create?: Maybe<ChannelCreateWithoutMessagesInput>;
  connect?: Maybe<ChannelWhereUniqueInput>;
}

export interface ChannelCreateWithoutMessagesInput {
  id?: Maybe<ID_Input>;
  creator: UserCreateOneWithoutCreatedChannelsInput;
  name: String;
  description?: Maybe<String>;
  participants?: Maybe<UserCreateManyWithoutChannelsInput>;
  group: GroupCreateOneWithoutChannelsInput;
}

export interface GroupCreateOneWithoutChannelsInput {
  create?: Maybe<GroupCreateWithoutChannelsInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface GroupCreateWithoutChannelsInput {
  id?: Maybe<ID_Input>;
  creator: UserCreateOneWithoutCreatedGroupsInput;
  name: String;
  description: String;
  category: String;
  topics?: Maybe<GroupCreatetopicsInput>;
  image?: Maybe<String>;
  backgroundImage?: Maybe<String>;
  url?: Maybe<String>;
  participants?: Maybe<UserCreateManyWithoutGroupsInput>;
}

export interface ChannelCreateManyWithoutGroupInput {
  create?: Maybe<
    ChannelCreateWithoutGroupInput[] | ChannelCreateWithoutGroupInput
  >;
  connect?: Maybe<ChannelWhereUniqueInput[] | ChannelWhereUniqueInput>;
}

export interface ChannelCreateWithoutGroupInput {
  id?: Maybe<ID_Input>;
  creator: UserCreateOneWithoutCreatedChannelsInput;
  name: String;
  description?: Maybe<String>;
  participants?: Maybe<UserCreateManyWithoutChannelsInput>;
  messages?: Maybe<MessageCreateManyWithoutChannelInput>;
}

export interface ChannelUpdateInput {
  creator?: Maybe<UserUpdateOneRequiredWithoutCreatedChannelsInput>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  participants?: Maybe<UserUpdateManyWithoutChannelsInput>;
  messages?: Maybe<MessageUpdateManyWithoutChannelInput>;
  group?: Maybe<GroupUpdateOneRequiredWithoutChannelsInput>;
}

export interface UserUpdateOneRequiredWithoutCreatedChannelsInput {
  create?: Maybe<UserCreateWithoutCreatedChannelsInput>;
  update?: Maybe<UserUpdateWithoutCreatedChannelsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCreatedChannelsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCreatedChannelsDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  image?: Maybe<String>;
  groups?: Maybe<GroupUpdateManyWithoutParticipantsInput>;
  createdGroups?: Maybe<GroupUpdateManyWithoutCreatorInput>;
  channels?: Maybe<ChannelUpdateManyWithoutParticipantsInput>;
  messages?: Maybe<MessageUpdateManyWithoutAuthorInput>;
}

export interface GroupUpdateManyWithoutParticipantsInput {
  create?: Maybe<
    GroupCreateWithoutParticipantsInput[] | GroupCreateWithoutParticipantsInput
  >;
  delete?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  connect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  set?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  disconnect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  update?: Maybe<
    | GroupUpdateWithWhereUniqueWithoutParticipantsInput[]
    | GroupUpdateWithWhereUniqueWithoutParticipantsInput
  >;
  upsert?: Maybe<
    | GroupUpsertWithWhereUniqueWithoutParticipantsInput[]
    | GroupUpsertWithWhereUniqueWithoutParticipantsInput
  >;
  deleteMany?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
  updateMany?: Maybe<
    GroupUpdateManyWithWhereNestedInput[] | GroupUpdateManyWithWhereNestedInput
  >;
}

export interface GroupUpdateWithWhereUniqueWithoutParticipantsInput {
  where: GroupWhereUniqueInput;
  data: GroupUpdateWithoutParticipantsDataInput;
}

export interface GroupUpdateWithoutParticipantsDataInput {
  creator?: Maybe<UserUpdateOneRequiredWithoutCreatedGroupsInput>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  category?: Maybe<String>;
  topics?: Maybe<GroupUpdatetopicsInput>;
  image?: Maybe<String>;
  backgroundImage?: Maybe<String>;
  url?: Maybe<String>;
  channels?: Maybe<ChannelUpdateManyWithoutGroupInput>;
}

export interface UserUpdateOneRequiredWithoutCreatedGroupsInput {
  create?: Maybe<UserCreateWithoutCreatedGroupsInput>;
  update?: Maybe<UserUpdateWithoutCreatedGroupsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCreatedGroupsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCreatedGroupsDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  image?: Maybe<String>;
  groups?: Maybe<GroupUpdateManyWithoutParticipantsInput>;
  channels?: Maybe<ChannelUpdateManyWithoutParticipantsInput>;
  createdChannels?: Maybe<ChannelUpdateManyWithoutCreatorInput>;
  messages?: Maybe<MessageUpdateManyWithoutAuthorInput>;
}

export interface ChannelUpdateManyWithoutParticipantsInput {
  create?: Maybe<
    | ChannelCreateWithoutParticipantsInput[]
    | ChannelCreateWithoutParticipantsInput
  >;
  delete?: Maybe<ChannelWhereUniqueInput[] | ChannelWhereUniqueInput>;
  connect?: Maybe<ChannelWhereUniqueInput[] | ChannelWhereUniqueInput>;
  set?: Maybe<ChannelWhereUniqueInput[] | ChannelWhereUniqueInput>;
  disconnect?: Maybe<ChannelWhereUniqueInput[] | ChannelWhereUniqueInput>;
  update?: Maybe<
    | ChannelUpdateWithWhereUniqueWithoutParticipantsInput[]
    | ChannelUpdateWithWhereUniqueWithoutParticipantsInput
  >;
  upsert?: Maybe<
    | ChannelUpsertWithWhereUniqueWithoutParticipantsInput[]
    | ChannelUpsertWithWhereUniqueWithoutParticipantsInput
  >;
  deleteMany?: Maybe<ChannelScalarWhereInput[] | ChannelScalarWhereInput>;
  updateMany?: Maybe<
    | ChannelUpdateManyWithWhereNestedInput[]
    | ChannelUpdateManyWithWhereNestedInput
  >;
}

export interface ChannelUpdateWithWhereUniqueWithoutParticipantsInput {
  where: ChannelWhereUniqueInput;
  data: ChannelUpdateWithoutParticipantsDataInput;
}

export interface ChannelUpdateWithoutParticipantsDataInput {
  creator?: Maybe<UserUpdateOneRequiredWithoutCreatedChannelsInput>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  messages?: Maybe<MessageUpdateManyWithoutChannelInput>;
  group?: Maybe<GroupUpdateOneRequiredWithoutChannelsInput>;
}

export interface MessageUpdateManyWithoutChannelInput {
  create?: Maybe<
    MessageCreateWithoutChannelInput[] | MessageCreateWithoutChannelInput
  >;
  delete?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  set?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  disconnect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  update?: Maybe<
    | MessageUpdateWithWhereUniqueWithoutChannelInput[]
    | MessageUpdateWithWhereUniqueWithoutChannelInput
  >;
  upsert?: Maybe<
    | MessageUpsertWithWhereUniqueWithoutChannelInput[]
    | MessageUpsertWithWhereUniqueWithoutChannelInput
  >;
  deleteMany?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  updateMany?: Maybe<
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput
  >;
}

export interface MessageUpdateWithWhereUniqueWithoutChannelInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutChannelDataInput;
}

export interface MessageUpdateWithoutChannelDataInput {
  content?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredWithoutMessagesInput>;
}

export interface UserUpdateOneRequiredWithoutMessagesInput {
  create?: Maybe<UserCreateWithoutMessagesInput>;
  update?: Maybe<UserUpdateWithoutMessagesDataInput>;
  upsert?: Maybe<UserUpsertWithoutMessagesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutMessagesDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  image?: Maybe<String>;
  groups?: Maybe<GroupUpdateManyWithoutParticipantsInput>;
  createdGroups?: Maybe<GroupUpdateManyWithoutCreatorInput>;
  channels?: Maybe<ChannelUpdateManyWithoutParticipantsInput>;
  createdChannels?: Maybe<ChannelUpdateManyWithoutCreatorInput>;
}

export interface GroupUpdateManyWithoutCreatorInput {
  create?: Maybe<
    GroupCreateWithoutCreatorInput[] | GroupCreateWithoutCreatorInput
  >;
  delete?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  connect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  set?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  disconnect?: Maybe<GroupWhereUniqueInput[] | GroupWhereUniqueInput>;
  update?: Maybe<
    | GroupUpdateWithWhereUniqueWithoutCreatorInput[]
    | GroupUpdateWithWhereUniqueWithoutCreatorInput
  >;
  upsert?: Maybe<
    | GroupUpsertWithWhereUniqueWithoutCreatorInput[]
    | GroupUpsertWithWhereUniqueWithoutCreatorInput
  >;
  deleteMany?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
  updateMany?: Maybe<
    GroupUpdateManyWithWhereNestedInput[] | GroupUpdateManyWithWhereNestedInput
  >;
}

export interface GroupUpdateWithWhereUniqueWithoutCreatorInput {
  where: GroupWhereUniqueInput;
  data: GroupUpdateWithoutCreatorDataInput;
}

export interface GroupUpdateWithoutCreatorDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  category?: Maybe<String>;
  topics?: Maybe<GroupUpdatetopicsInput>;
  image?: Maybe<String>;
  backgroundImage?: Maybe<String>;
  url?: Maybe<String>;
  participants?: Maybe<UserUpdateManyWithoutGroupsInput>;
  channels?: Maybe<ChannelUpdateManyWithoutGroupInput>;
}

export interface GroupUpdatetopicsInput {
  set?: Maybe<String[] | String>;
}

export interface UserUpdateManyWithoutGroupsInput {
  create?: Maybe<UserCreateWithoutGroupsInput[] | UserCreateWithoutGroupsInput>;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutGroupsInput[]
    | UserUpdateWithWhereUniqueWithoutGroupsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutGroupsInput[]
    | UserUpsertWithWhereUniqueWithoutGroupsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutGroupsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutGroupsDataInput;
}

export interface UserUpdateWithoutGroupsDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  image?: Maybe<String>;
  createdGroups?: Maybe<GroupUpdateManyWithoutCreatorInput>;
  channels?: Maybe<ChannelUpdateManyWithoutParticipantsInput>;
  createdChannels?: Maybe<ChannelUpdateManyWithoutCreatorInput>;
  messages?: Maybe<MessageUpdateManyWithoutAuthorInput>;
}

export interface ChannelUpdateManyWithoutCreatorInput {
  create?: Maybe<
    ChannelCreateWithoutCreatorInput[] | ChannelCreateWithoutCreatorInput
  >;
  delete?: Maybe<ChannelWhereUniqueInput[] | ChannelWhereUniqueInput>;
  connect?: Maybe<ChannelWhereUniqueInput[] | ChannelWhereUniqueInput>;
  set?: Maybe<ChannelWhereUniqueInput[] | ChannelWhereUniqueInput>;
  disconnect?: Maybe<ChannelWhereUniqueInput[] | ChannelWhereUniqueInput>;
  update?: Maybe<
    | ChannelUpdateWithWhereUniqueWithoutCreatorInput[]
    | ChannelUpdateWithWhereUniqueWithoutCreatorInput
  >;
  upsert?: Maybe<
    | ChannelUpsertWithWhereUniqueWithoutCreatorInput[]
    | ChannelUpsertWithWhereUniqueWithoutCreatorInput
  >;
  deleteMany?: Maybe<ChannelScalarWhereInput[] | ChannelScalarWhereInput>;
  updateMany?: Maybe<
    | ChannelUpdateManyWithWhereNestedInput[]
    | ChannelUpdateManyWithWhereNestedInput
  >;
}

export interface ChannelUpdateWithWhereUniqueWithoutCreatorInput {
  where: ChannelWhereUniqueInput;
  data: ChannelUpdateWithoutCreatorDataInput;
}

export interface ChannelUpdateWithoutCreatorDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  participants?: Maybe<UserUpdateManyWithoutChannelsInput>;
  messages?: Maybe<MessageUpdateManyWithoutChannelInput>;
  group?: Maybe<GroupUpdateOneRequiredWithoutChannelsInput>;
}

export interface UserUpdateManyWithoutChannelsInput {
  create?: Maybe<
    UserCreateWithoutChannelsInput[] | UserCreateWithoutChannelsInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutChannelsInput[]
    | UserUpdateWithWhereUniqueWithoutChannelsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutChannelsInput[]
    | UserUpsertWithWhereUniqueWithoutChannelsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutChannelsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutChannelsDataInput;
}

export interface UserUpdateWithoutChannelsDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  image?: Maybe<String>;
  groups?: Maybe<GroupUpdateManyWithoutParticipantsInput>;
  createdGroups?: Maybe<GroupUpdateManyWithoutCreatorInput>;
  createdChannels?: Maybe<ChannelUpdateManyWithoutCreatorInput>;
  messages?: Maybe<MessageUpdateManyWithoutAuthorInput>;
}

export interface MessageUpdateManyWithoutAuthorInput {
  create?: Maybe<
    MessageCreateWithoutAuthorInput[] | MessageCreateWithoutAuthorInput
  >;
  delete?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  set?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  disconnect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  update?: Maybe<
    | MessageUpdateWithWhereUniqueWithoutAuthorInput[]
    | MessageUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | MessageUpsertWithWhereUniqueWithoutAuthorInput[]
    | MessageUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  updateMany?: Maybe<
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput
  >;
}

export interface MessageUpdateWithWhereUniqueWithoutAuthorInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutAuthorDataInput;
}

export interface MessageUpdateWithoutAuthorDataInput {
  content?: Maybe<String>;
  channel?: Maybe<ChannelUpdateOneRequiredWithoutMessagesInput>;
}

export interface ChannelUpdateOneRequiredWithoutMessagesInput {
  create?: Maybe<ChannelCreateWithoutMessagesInput>;
  update?: Maybe<ChannelUpdateWithoutMessagesDataInput>;
  upsert?: Maybe<ChannelUpsertWithoutMessagesInput>;
  connect?: Maybe<ChannelWhereUniqueInput>;
}

export interface ChannelUpdateWithoutMessagesDataInput {
  creator?: Maybe<UserUpdateOneRequiredWithoutCreatedChannelsInput>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  participants?: Maybe<UserUpdateManyWithoutChannelsInput>;
  group?: Maybe<GroupUpdateOneRequiredWithoutChannelsInput>;
}

export interface GroupUpdateOneRequiredWithoutChannelsInput {
  create?: Maybe<GroupCreateWithoutChannelsInput>;
  update?: Maybe<GroupUpdateWithoutChannelsDataInput>;
  upsert?: Maybe<GroupUpsertWithoutChannelsInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface GroupUpdateWithoutChannelsDataInput {
  creator?: Maybe<UserUpdateOneRequiredWithoutCreatedGroupsInput>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  category?: Maybe<String>;
  topics?: Maybe<GroupUpdatetopicsInput>;
  image?: Maybe<String>;
  backgroundImage?: Maybe<String>;
  url?: Maybe<String>;
  participants?: Maybe<UserUpdateManyWithoutGroupsInput>;
}

export interface GroupUpsertWithoutChannelsInput {
  update: GroupUpdateWithoutChannelsDataInput;
  create: GroupCreateWithoutChannelsInput;
}

export interface ChannelUpsertWithoutMessagesInput {
  update: ChannelUpdateWithoutMessagesDataInput;
  create: ChannelCreateWithoutMessagesInput;
}

export interface MessageUpsertWithWhereUniqueWithoutAuthorInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutAuthorDataInput;
  create: MessageCreateWithoutAuthorInput;
}

export interface MessageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  AND?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  OR?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  NOT?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
}

export interface MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput;
  data: MessageUpdateManyDataInput;
}

export interface MessageUpdateManyDataInput {
  content?: Maybe<String>;
}

export interface UserUpsertWithWhereUniqueWithoutChannelsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutChannelsDataInput;
  create: UserCreateWithoutChannelsInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  image?: Maybe<String>;
}

export interface ChannelUpsertWithWhereUniqueWithoutCreatorInput {
  where: ChannelWhereUniqueInput;
  update: ChannelUpdateWithoutCreatorDataInput;
  create: ChannelCreateWithoutCreatorInput;
}

export interface ChannelScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<ChannelScalarWhereInput[] | ChannelScalarWhereInput>;
  OR?: Maybe<ChannelScalarWhereInput[] | ChannelScalarWhereInput>;
  NOT?: Maybe<ChannelScalarWhereInput[] | ChannelScalarWhereInput>;
}

export interface ChannelUpdateManyWithWhereNestedInput {
  where: ChannelScalarWhereInput;
  data: ChannelUpdateManyDataInput;
}

export interface ChannelUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface UserUpsertWithWhereUniqueWithoutGroupsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutGroupsDataInput;
  create: UserCreateWithoutGroupsInput;
}

export interface ChannelUpdateManyWithoutGroupInput {
  create?: Maybe<
    ChannelCreateWithoutGroupInput[] | ChannelCreateWithoutGroupInput
  >;
  delete?: Maybe<ChannelWhereUniqueInput[] | ChannelWhereUniqueInput>;
  connect?: Maybe<ChannelWhereUniqueInput[] | ChannelWhereUniqueInput>;
  set?: Maybe<ChannelWhereUniqueInput[] | ChannelWhereUniqueInput>;
  disconnect?: Maybe<ChannelWhereUniqueInput[] | ChannelWhereUniqueInput>;
  update?: Maybe<
    | ChannelUpdateWithWhereUniqueWithoutGroupInput[]
    | ChannelUpdateWithWhereUniqueWithoutGroupInput
  >;
  upsert?: Maybe<
    | ChannelUpsertWithWhereUniqueWithoutGroupInput[]
    | ChannelUpsertWithWhereUniqueWithoutGroupInput
  >;
  deleteMany?: Maybe<ChannelScalarWhereInput[] | ChannelScalarWhereInput>;
  updateMany?: Maybe<
    | ChannelUpdateManyWithWhereNestedInput[]
    | ChannelUpdateManyWithWhereNestedInput
  >;
}

export interface ChannelUpdateWithWhereUniqueWithoutGroupInput {
  where: ChannelWhereUniqueInput;
  data: ChannelUpdateWithoutGroupDataInput;
}

export interface ChannelUpdateWithoutGroupDataInput {
  creator?: Maybe<UserUpdateOneRequiredWithoutCreatedChannelsInput>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  participants?: Maybe<UserUpdateManyWithoutChannelsInput>;
  messages?: Maybe<MessageUpdateManyWithoutChannelInput>;
}

export interface ChannelUpsertWithWhereUniqueWithoutGroupInput {
  where: ChannelWhereUniqueInput;
  update: ChannelUpdateWithoutGroupDataInput;
  create: ChannelCreateWithoutGroupInput;
}

export interface GroupUpsertWithWhereUniqueWithoutCreatorInput {
  where: GroupWhereUniqueInput;
  update: GroupUpdateWithoutCreatorDataInput;
  create: GroupCreateWithoutCreatorInput;
}

export interface GroupScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  category?: Maybe<String>;
  category_not?: Maybe<String>;
  category_in?: Maybe<String[] | String>;
  category_not_in?: Maybe<String[] | String>;
  category_lt?: Maybe<String>;
  category_lte?: Maybe<String>;
  category_gt?: Maybe<String>;
  category_gte?: Maybe<String>;
  category_contains?: Maybe<String>;
  category_not_contains?: Maybe<String>;
  category_starts_with?: Maybe<String>;
  category_not_starts_with?: Maybe<String>;
  category_ends_with?: Maybe<String>;
  category_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  backgroundImage?: Maybe<String>;
  backgroundImage_not?: Maybe<String>;
  backgroundImage_in?: Maybe<String[] | String>;
  backgroundImage_not_in?: Maybe<String[] | String>;
  backgroundImage_lt?: Maybe<String>;
  backgroundImage_lte?: Maybe<String>;
  backgroundImage_gt?: Maybe<String>;
  backgroundImage_gte?: Maybe<String>;
  backgroundImage_contains?: Maybe<String>;
  backgroundImage_not_contains?: Maybe<String>;
  backgroundImage_starts_with?: Maybe<String>;
  backgroundImage_not_starts_with?: Maybe<String>;
  backgroundImage_ends_with?: Maybe<String>;
  backgroundImage_not_ends_with?: Maybe<String>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
  OR?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
  NOT?: Maybe<GroupScalarWhereInput[] | GroupScalarWhereInput>;
}

export interface GroupUpdateManyWithWhereNestedInput {
  where: GroupScalarWhereInput;
  data: GroupUpdateManyDataInput;
}

export interface GroupUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  category?: Maybe<String>;
  topics?: Maybe<GroupUpdatetopicsInput>;
  image?: Maybe<String>;
  backgroundImage?: Maybe<String>;
  url?: Maybe<String>;
}

export interface UserUpsertWithoutMessagesInput {
  update: UserUpdateWithoutMessagesDataInput;
  create: UserCreateWithoutMessagesInput;
}

export interface MessageUpsertWithWhereUniqueWithoutChannelInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutChannelDataInput;
  create: MessageCreateWithoutChannelInput;
}

export interface ChannelUpsertWithWhereUniqueWithoutParticipantsInput {
  where: ChannelWhereUniqueInput;
  update: ChannelUpdateWithoutParticipantsDataInput;
  create: ChannelCreateWithoutParticipantsInput;
}

export interface UserUpsertWithoutCreatedGroupsInput {
  update: UserUpdateWithoutCreatedGroupsDataInput;
  create: UserCreateWithoutCreatedGroupsInput;
}

export interface GroupUpsertWithWhereUniqueWithoutParticipantsInput {
  where: GroupWhereUniqueInput;
  update: GroupUpdateWithoutParticipantsDataInput;
  create: GroupCreateWithoutParticipantsInput;
}

export interface UserUpsertWithoutCreatedChannelsInput {
  update: UserUpdateWithoutCreatedChannelsDataInput;
  create: UserCreateWithoutCreatedChannelsInput;
}

export interface ChannelUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface GroupCreateInput {
  id?: Maybe<ID_Input>;
  creator: UserCreateOneWithoutCreatedGroupsInput;
  name: String;
  description: String;
  category: String;
  topics?: Maybe<GroupCreatetopicsInput>;
  image?: Maybe<String>;
  backgroundImage?: Maybe<String>;
  url?: Maybe<String>;
  participants?: Maybe<UserCreateManyWithoutGroupsInput>;
  channels?: Maybe<ChannelCreateManyWithoutGroupInput>;
}

export interface GroupUpdateInput {
  creator?: Maybe<UserUpdateOneRequiredWithoutCreatedGroupsInput>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  category?: Maybe<String>;
  topics?: Maybe<GroupUpdatetopicsInput>;
  image?: Maybe<String>;
  backgroundImage?: Maybe<String>;
  url?: Maybe<String>;
  participants?: Maybe<UserUpdateManyWithoutGroupsInput>;
  channels?: Maybe<ChannelUpdateManyWithoutGroupInput>;
}

export interface GroupUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  category?: Maybe<String>;
  topics?: Maybe<GroupUpdatetopicsInput>;
  image?: Maybe<String>;
  backgroundImage?: Maybe<String>;
  url?: Maybe<String>;
}

export interface MessageCreateInput {
  id?: Maybe<ID_Input>;
  content: String;
  channel: ChannelCreateOneWithoutMessagesInput;
  author: UserCreateOneWithoutMessagesInput;
}

export interface MessageUpdateInput {
  content?: Maybe<String>;
  channel?: Maybe<ChannelUpdateOneRequiredWithoutMessagesInput>;
  author?: Maybe<UserUpdateOneRequiredWithoutMessagesInput>;
}

export interface MessageUpdateManyMutationInput {
  content?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  image?: Maybe<String>;
  groups?: Maybe<GroupCreateManyWithoutParticipantsInput>;
  createdGroups?: Maybe<GroupCreateManyWithoutCreatorInput>;
  channels?: Maybe<ChannelCreateManyWithoutParticipantsInput>;
  createdChannels?: Maybe<ChannelCreateManyWithoutCreatorInput>;
  messages?: Maybe<MessageCreateManyWithoutAuthorInput>;
}

export interface UserUpdateInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  image?: Maybe<String>;
  groups?: Maybe<GroupUpdateManyWithoutParticipantsInput>;
  createdGroups?: Maybe<GroupUpdateManyWithoutCreatorInput>;
  channels?: Maybe<ChannelUpdateManyWithoutParticipantsInput>;
  createdChannels?: Maybe<ChannelUpdateManyWithoutCreatorInput>;
  messages?: Maybe<MessageUpdateManyWithoutAuthorInput>;
}

export interface UserUpdateManyMutationInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  image?: Maybe<String>;
}

export interface ChannelSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChannelWhereInput>;
  AND?: Maybe<ChannelSubscriptionWhereInput[] | ChannelSubscriptionWhereInput>;
  OR?: Maybe<ChannelSubscriptionWhereInput[] | ChannelSubscriptionWhereInput>;
  NOT?: Maybe<ChannelSubscriptionWhereInput[] | ChannelSubscriptionWhereInput>;
}

export interface GroupSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GroupWhereInput>;
  AND?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
  OR?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
  NOT?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MessageWhereInput>;
  AND?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  OR?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  NOT?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Channel {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  description?: String;
}

export interface ChannelPromise extends Promise<Channel>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  creator: <T = UserPromise>() => T;
  name: () => Promise<String>;
  description: () => Promise<String>;
  participants: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  group: <T = GroupPromise>() => T;
}

export interface ChannelSubscription
  extends Promise<AsyncIterator<Channel>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  creator: <T = UserSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  participants: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  group: <T = GroupSubscription>() => T;
}

export interface ChannelNullablePromise
  extends Promise<Channel | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  creator: <T = UserPromise>() => T;
  name: () => Promise<String>;
  description: () => Promise<String>;
  participants: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  group: <T = GroupPromise>() => T;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  image?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  image: () => Promise<String>;
  groups: <T = FragmentableArray<Group>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdGroups: <T = FragmentableArray<Group>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  channels: <T = FragmentableArray<Channel>>(args?: {
    where?: ChannelWhereInput;
    orderBy?: ChannelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdChannels: <T = FragmentableArray<Channel>>(args?: {
    where?: ChannelWhereInput;
    orderBy?: ChannelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  groups: <T = Promise<AsyncIterator<GroupSubscription>>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdGroups: <T = Promise<AsyncIterator<GroupSubscription>>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  channels: <T = Promise<AsyncIterator<ChannelSubscription>>>(args?: {
    where?: ChannelWhereInput;
    orderBy?: ChannelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdChannels: <T = Promise<AsyncIterator<ChannelSubscription>>>(args?: {
    where?: ChannelWhereInput;
    orderBy?: ChannelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  image: () => Promise<String>;
  groups: <T = FragmentableArray<Group>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdGroups: <T = FragmentableArray<Group>>(args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  channels: <T = FragmentableArray<Channel>>(args?: {
    where?: ChannelWhereInput;
    orderBy?: ChannelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdChannels: <T = FragmentableArray<Channel>>(args?: {
    where?: ChannelWhereInput;
    orderBy?: ChannelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Group {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  description: String;
  category: String;
  topics: String[];
  image?: String;
  backgroundImage?: String;
  url?: String;
}

export interface GroupPromise extends Promise<Group>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  creator: <T = UserPromise>() => T;
  name: () => Promise<String>;
  description: () => Promise<String>;
  category: () => Promise<String>;
  topics: () => Promise<String[]>;
  image: () => Promise<String>;
  backgroundImage: () => Promise<String>;
  url: () => Promise<String>;
  participants: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  channels: <T = FragmentableArray<Channel>>(args?: {
    where?: ChannelWhereInput;
    orderBy?: ChannelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GroupSubscription
  extends Promise<AsyncIterator<Group>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  creator: <T = UserSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  topics: () => Promise<AsyncIterator<String[]>>;
  image: () => Promise<AsyncIterator<String>>;
  backgroundImage: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
  participants: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  channels: <T = Promise<AsyncIterator<ChannelSubscription>>>(args?: {
    where?: ChannelWhereInput;
    orderBy?: ChannelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface GroupNullablePromise
  extends Promise<Group | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  creator: <T = UserPromise>() => T;
  name: () => Promise<String>;
  description: () => Promise<String>;
  category: () => Promise<String>;
  topics: () => Promise<String[]>;
  image: () => Promise<String>;
  backgroundImage: () => Promise<String>;
  url: () => Promise<String>;
  participants: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  channels: <T = FragmentableArray<Channel>>(args?: {
    where?: ChannelWhereInput;
    orderBy?: ChannelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Message {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  content: String;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  content: () => Promise<String>;
  channel: <T = ChannelPromise>() => T;
  author: <T = UserPromise>() => T;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  content: () => Promise<AsyncIterator<String>>;
  channel: <T = ChannelSubscription>() => T;
  author: <T = UserSubscription>() => T;
}

export interface MessageNullablePromise
  extends Promise<Message | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  content: () => Promise<String>;
  channel: <T = ChannelPromise>() => T;
  author: <T = UserPromise>() => T;
}

export interface ChannelConnection {
  pageInfo: PageInfo;
  edges: ChannelEdge[];
}

export interface ChannelConnectionPromise
  extends Promise<ChannelConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChannelEdge>>() => T;
  aggregate: <T = AggregateChannelPromise>() => T;
}

export interface ChannelConnectionSubscription
  extends Promise<AsyncIterator<ChannelConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChannelEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChannelSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ChannelEdge {
  node: Channel;
  cursor: String;
}

export interface ChannelEdgePromise extends Promise<ChannelEdge>, Fragmentable {
  node: <T = ChannelPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChannelEdgeSubscription
  extends Promise<AsyncIterator<ChannelEdge>>,
    Fragmentable {
  node: <T = ChannelSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChannel {
  count: Int;
}

export interface AggregateChannelPromise
  extends Promise<AggregateChannel>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChannelSubscription
  extends Promise<AsyncIterator<AggregateChannel>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GroupConnection {
  pageInfo: PageInfo;
  edges: GroupEdge[];
}

export interface GroupConnectionPromise
  extends Promise<GroupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GroupEdge>>() => T;
  aggregate: <T = AggregateGroupPromise>() => T;
}

export interface GroupConnectionSubscription
  extends Promise<AsyncIterator<GroupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GroupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGroupSubscription>() => T;
}

export interface GroupEdge {
  node: Group;
  cursor: String;
}

export interface GroupEdgePromise extends Promise<GroupEdge>, Fragmentable {
  node: <T = GroupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GroupEdgeSubscription
  extends Promise<AsyncIterator<GroupEdge>>,
    Fragmentable {
  node: <T = GroupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGroup {
  count: Int;
}

export interface AggregateGroupPromise
  extends Promise<AggregateGroup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGroupSubscription
  extends Promise<AsyncIterator<AggregateGroup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ChannelSubscriptionPayload {
  mutation: MutationType;
  node: Channel;
  updatedFields: String[];
  previousValues: ChannelPreviousValues;
}

export interface ChannelSubscriptionPayloadPromise
  extends Promise<ChannelSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChannelPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChannelPreviousValuesPromise>() => T;
}

export interface ChannelSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChannelSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChannelSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChannelPreviousValuesSubscription>() => T;
}

export interface ChannelPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  description?: String;
}

export interface ChannelPreviousValuesPromise
  extends Promise<ChannelPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  description: () => Promise<String>;
}

export interface ChannelPreviousValuesSubscription
  extends Promise<AsyncIterator<ChannelPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface GroupSubscriptionPayload {
  mutation: MutationType;
  node: Group;
  updatedFields: String[];
  previousValues: GroupPreviousValues;
}

export interface GroupSubscriptionPayloadPromise
  extends Promise<GroupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GroupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GroupPreviousValuesPromise>() => T;
}

export interface GroupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GroupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GroupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GroupPreviousValuesSubscription>() => T;
}

export interface GroupPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  description: String;
  category: String;
  topics: String[];
  image?: String;
  backgroundImage?: String;
  url?: String;
}

export interface GroupPreviousValuesPromise
  extends Promise<GroupPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  category: () => Promise<String>;
  topics: () => Promise<String[]>;
  image: () => Promise<String>;
  backgroundImage: () => Promise<String>;
  url: () => Promise<String>;
}

export interface GroupPreviousValuesSubscription
  extends Promise<AsyncIterator<GroupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  topics: () => Promise<AsyncIterator<String[]>>;
  image: () => Promise<AsyncIterator<String>>;
  backgroundImage: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface MessagePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  content: String;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  content: () => Promise<String>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  image?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  image: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Group",
    embedded: false
  },
  {
    name: "Channel",
    embedded: false
  },
  {
    name: "Message",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
