type AggregateChannel {
  count: Int!
}

type AggregateGroup {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Channel {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  creator: User!
  name: String!
  description: String
  participants(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  group: Group!
}

type ChannelConnection {
  pageInfo: PageInfo!
  edges: [ChannelEdge]!
  aggregate: AggregateChannel!
}

input ChannelCreateInput {
  id: ID
  creator: UserCreateOneWithoutCreatedChannelsInput!
  name: String!
  description: String
  participants: UserCreateManyWithoutChannelsInput
  messages: MessageCreateManyWithoutChannelInput
  group: GroupCreateOneWithoutChannelsInput!
}

input ChannelCreateManyWithoutCreatorInput {
  create: [ChannelCreateWithoutCreatorInput!]
  connect: [ChannelWhereUniqueInput!]
}

input ChannelCreateManyWithoutGroupInput {
  create: [ChannelCreateWithoutGroupInput!]
  connect: [ChannelWhereUniqueInput!]
}

input ChannelCreateManyWithoutParticipantsInput {
  create: [ChannelCreateWithoutParticipantsInput!]
  connect: [ChannelWhereUniqueInput!]
}

input ChannelCreateOneWithoutMessagesInput {
  create: ChannelCreateWithoutMessagesInput
  connect: ChannelWhereUniqueInput
}

input ChannelCreateWithoutCreatorInput {
  id: ID
  name: String!
  description: String
  participants: UserCreateManyWithoutChannelsInput
  messages: MessageCreateManyWithoutChannelInput
  group: GroupCreateOneWithoutChannelsInput!
}

input ChannelCreateWithoutGroupInput {
  id: ID
  creator: UserCreateOneWithoutCreatedChannelsInput!
  name: String!
  description: String
  participants: UserCreateManyWithoutChannelsInput
  messages: MessageCreateManyWithoutChannelInput
}

input ChannelCreateWithoutMessagesInput {
  id: ID
  creator: UserCreateOneWithoutCreatedChannelsInput!
  name: String!
  description: String
  participants: UserCreateManyWithoutChannelsInput
  group: GroupCreateOneWithoutChannelsInput!
}

input ChannelCreateWithoutParticipantsInput {
  id: ID
  creator: UserCreateOneWithoutCreatedChannelsInput!
  name: String!
  description: String
  messages: MessageCreateManyWithoutChannelInput
  group: GroupCreateOneWithoutChannelsInput!
}

type ChannelEdge {
  node: Channel!
  cursor: String!
}

enum ChannelOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type ChannelPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
}

input ChannelScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [ChannelScalarWhereInput!]
  OR: [ChannelScalarWhereInput!]
  NOT: [ChannelScalarWhereInput!]
}

type ChannelSubscriptionPayload {
  mutation: MutationType!
  node: Channel
  updatedFields: [String!]
  previousValues: ChannelPreviousValues
}

input ChannelSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ChannelWhereInput
  AND: [ChannelSubscriptionWhereInput!]
  OR: [ChannelSubscriptionWhereInput!]
  NOT: [ChannelSubscriptionWhereInput!]
}

input ChannelUpdateInput {
  creator: UserUpdateOneRequiredWithoutCreatedChannelsInput
  name: String
  description: String
  participants: UserUpdateManyWithoutChannelsInput
  messages: MessageUpdateManyWithoutChannelInput
  group: GroupUpdateOneRequiredWithoutChannelsInput
}

input ChannelUpdateManyDataInput {
  name: String
  description: String
}

input ChannelUpdateManyMutationInput {
  name: String
  description: String
}

input ChannelUpdateManyWithoutCreatorInput {
  create: [ChannelCreateWithoutCreatorInput!]
  delete: [ChannelWhereUniqueInput!]
  connect: [ChannelWhereUniqueInput!]
  set: [ChannelWhereUniqueInput!]
  disconnect: [ChannelWhereUniqueInput!]
  update: [ChannelUpdateWithWhereUniqueWithoutCreatorInput!]
  upsert: [ChannelUpsertWithWhereUniqueWithoutCreatorInput!]
  deleteMany: [ChannelScalarWhereInput!]
  updateMany: [ChannelUpdateManyWithWhereNestedInput!]
}

input ChannelUpdateManyWithoutGroupInput {
  create: [ChannelCreateWithoutGroupInput!]
  delete: [ChannelWhereUniqueInput!]
  connect: [ChannelWhereUniqueInput!]
  set: [ChannelWhereUniqueInput!]
  disconnect: [ChannelWhereUniqueInput!]
  update: [ChannelUpdateWithWhereUniqueWithoutGroupInput!]
  upsert: [ChannelUpsertWithWhereUniqueWithoutGroupInput!]
  deleteMany: [ChannelScalarWhereInput!]
  updateMany: [ChannelUpdateManyWithWhereNestedInput!]
}

input ChannelUpdateManyWithoutParticipantsInput {
  create: [ChannelCreateWithoutParticipantsInput!]
  delete: [ChannelWhereUniqueInput!]
  connect: [ChannelWhereUniqueInput!]
  set: [ChannelWhereUniqueInput!]
  disconnect: [ChannelWhereUniqueInput!]
  update: [ChannelUpdateWithWhereUniqueWithoutParticipantsInput!]
  upsert: [ChannelUpsertWithWhereUniqueWithoutParticipantsInput!]
  deleteMany: [ChannelScalarWhereInput!]
  updateMany: [ChannelUpdateManyWithWhereNestedInput!]
}

input ChannelUpdateManyWithWhereNestedInput {
  where: ChannelScalarWhereInput!
  data: ChannelUpdateManyDataInput!
}

input ChannelUpdateOneRequiredWithoutMessagesInput {
  create: ChannelCreateWithoutMessagesInput
  update: ChannelUpdateWithoutMessagesDataInput
  upsert: ChannelUpsertWithoutMessagesInput
  connect: ChannelWhereUniqueInput
}

input ChannelUpdateWithoutCreatorDataInput {
  name: String
  description: String
  participants: UserUpdateManyWithoutChannelsInput
  messages: MessageUpdateManyWithoutChannelInput
  group: GroupUpdateOneRequiredWithoutChannelsInput
}

input ChannelUpdateWithoutGroupDataInput {
  creator: UserUpdateOneRequiredWithoutCreatedChannelsInput
  name: String
  description: String
  participants: UserUpdateManyWithoutChannelsInput
  messages: MessageUpdateManyWithoutChannelInput
}

input ChannelUpdateWithoutMessagesDataInput {
  creator: UserUpdateOneRequiredWithoutCreatedChannelsInput
  name: String
  description: String
  participants: UserUpdateManyWithoutChannelsInput
  group: GroupUpdateOneRequiredWithoutChannelsInput
}

input ChannelUpdateWithoutParticipantsDataInput {
  creator: UserUpdateOneRequiredWithoutCreatedChannelsInput
  name: String
  description: String
  messages: MessageUpdateManyWithoutChannelInput
  group: GroupUpdateOneRequiredWithoutChannelsInput
}

input ChannelUpdateWithWhereUniqueWithoutCreatorInput {
  where: ChannelWhereUniqueInput!
  data: ChannelUpdateWithoutCreatorDataInput!
}

input ChannelUpdateWithWhereUniqueWithoutGroupInput {
  where: ChannelWhereUniqueInput!
  data: ChannelUpdateWithoutGroupDataInput!
}

input ChannelUpdateWithWhereUniqueWithoutParticipantsInput {
  where: ChannelWhereUniqueInput!
  data: ChannelUpdateWithoutParticipantsDataInput!
}

input ChannelUpsertWithoutMessagesInput {
  update: ChannelUpdateWithoutMessagesDataInput!
  create: ChannelCreateWithoutMessagesInput!
}

input ChannelUpsertWithWhereUniqueWithoutCreatorInput {
  where: ChannelWhereUniqueInput!
  update: ChannelUpdateWithoutCreatorDataInput!
  create: ChannelCreateWithoutCreatorInput!
}

input ChannelUpsertWithWhereUniqueWithoutGroupInput {
  where: ChannelWhereUniqueInput!
  update: ChannelUpdateWithoutGroupDataInput!
  create: ChannelCreateWithoutGroupInput!
}

input ChannelUpsertWithWhereUniqueWithoutParticipantsInput {
  where: ChannelWhereUniqueInput!
  update: ChannelUpdateWithoutParticipantsDataInput!
  create: ChannelCreateWithoutParticipantsInput!
}

input ChannelWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  creator: UserWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  participants_every: UserWhereInput
  participants_some: UserWhereInput
  participants_none: UserWhereInput
  messages_every: MessageWhereInput
  messages_some: MessageWhereInput
  messages_none: MessageWhereInput
  group: GroupWhereInput
  AND: [ChannelWhereInput!]
  OR: [ChannelWhereInput!]
  NOT: [ChannelWhereInput!]
}

input ChannelWhereUniqueInput {
  id: ID
}

scalar DateTime

type Group {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  creator: User!
  name: String!
  description: String!
  category: String!
  topics: [String!]!
  image: String
  backgroundImage: String
  url: String
  participants(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  channels(where: ChannelWhereInput, orderBy: ChannelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Channel!]
}

type GroupConnection {
  pageInfo: PageInfo!
  edges: [GroupEdge]!
  aggregate: AggregateGroup!
}

input GroupCreateInput {
  id: ID
  creator: UserCreateOneWithoutCreatedGroupsInput!
  name: String!
  description: String!
  category: String!
  topics: GroupCreatetopicsInput
  image: String
  backgroundImage: String
  url: String
  participants: UserCreateManyWithoutGroupsInput
  channels: ChannelCreateManyWithoutGroupInput
}

input GroupCreateManyWithoutCreatorInput {
  create: [GroupCreateWithoutCreatorInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateManyWithoutParticipantsInput {
  create: [GroupCreateWithoutParticipantsInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateOneWithoutChannelsInput {
  create: GroupCreateWithoutChannelsInput
  connect: GroupWhereUniqueInput
}

input GroupCreatetopicsInput {
  set: [String!]
}

input GroupCreateWithoutChannelsInput {
  id: ID
  creator: UserCreateOneWithoutCreatedGroupsInput!
  name: String!
  description: String!
  category: String!
  topics: GroupCreatetopicsInput
  image: String
  backgroundImage: String
  url: String
  participants: UserCreateManyWithoutGroupsInput
}

input GroupCreateWithoutCreatorInput {
  id: ID
  name: String!
  description: String!
  category: String!
  topics: GroupCreatetopicsInput
  image: String
  backgroundImage: String
  url: String
  participants: UserCreateManyWithoutGroupsInput
  channels: ChannelCreateManyWithoutGroupInput
}

input GroupCreateWithoutParticipantsInput {
  id: ID
  creator: UserCreateOneWithoutCreatedGroupsInput!
  name: String!
  description: String!
  category: String!
  topics: GroupCreatetopicsInput
  image: String
  backgroundImage: String
  url: String
  channels: ChannelCreateManyWithoutGroupInput
}

type GroupEdge {
  node: Group!
  cursor: String!
}

enum GroupOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  category_ASC
  category_DESC
  image_ASC
  image_DESC
  backgroundImage_ASC
  backgroundImage_DESC
  url_ASC
  url_DESC
}

type GroupPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String!
  category: String!
  topics: [String!]!
  image: String
  backgroundImage: String
  url: String
}

input GroupScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  backgroundImage: String
  backgroundImage_not: String
  backgroundImage_in: [String!]
  backgroundImage_not_in: [String!]
  backgroundImage_lt: String
  backgroundImage_lte: String
  backgroundImage_gt: String
  backgroundImage_gte: String
  backgroundImage_contains: String
  backgroundImage_not_contains: String
  backgroundImage_starts_with: String
  backgroundImage_not_starts_with: String
  backgroundImage_ends_with: String
  backgroundImage_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [GroupScalarWhereInput!]
  OR: [GroupScalarWhereInput!]
  NOT: [GroupScalarWhereInput!]
}

type GroupSubscriptionPayload {
  mutation: MutationType!
  node: Group
  updatedFields: [String!]
  previousValues: GroupPreviousValues
}

input GroupSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GroupWhereInput
  AND: [GroupSubscriptionWhereInput!]
  OR: [GroupSubscriptionWhereInput!]
  NOT: [GroupSubscriptionWhereInput!]
}

input GroupUpdateInput {
  creator: UserUpdateOneRequiredWithoutCreatedGroupsInput
  name: String
  description: String
  category: String
  topics: GroupUpdatetopicsInput
  image: String
  backgroundImage: String
  url: String
  participants: UserUpdateManyWithoutGroupsInput
  channels: ChannelUpdateManyWithoutGroupInput
}

input GroupUpdateManyDataInput {
  name: String
  description: String
  category: String
  topics: GroupUpdatetopicsInput
  image: String
  backgroundImage: String
  url: String
}

input GroupUpdateManyMutationInput {
  name: String
  description: String
  category: String
  topics: GroupUpdatetopicsInput
  image: String
  backgroundImage: String
  url: String
}

input GroupUpdateManyWithoutCreatorInput {
  create: [GroupCreateWithoutCreatorInput!]
  delete: [GroupWhereUniqueInput!]
  connect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutCreatorInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutCreatorInput!]
  deleteMany: [GroupScalarWhereInput!]
  updateMany: [GroupUpdateManyWithWhereNestedInput!]
}

input GroupUpdateManyWithoutParticipantsInput {
  create: [GroupCreateWithoutParticipantsInput!]
  delete: [GroupWhereUniqueInput!]
  connect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutParticipantsInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutParticipantsInput!]
  deleteMany: [GroupScalarWhereInput!]
  updateMany: [GroupUpdateManyWithWhereNestedInput!]
}

input GroupUpdateManyWithWhereNestedInput {
  where: GroupScalarWhereInput!
  data: GroupUpdateManyDataInput!
}

input GroupUpdateOneRequiredWithoutChannelsInput {
  create: GroupCreateWithoutChannelsInput
  update: GroupUpdateWithoutChannelsDataInput
  upsert: GroupUpsertWithoutChannelsInput
  connect: GroupWhereUniqueInput
}

input GroupUpdatetopicsInput {
  set: [String!]
}

input GroupUpdateWithoutChannelsDataInput {
  creator: UserUpdateOneRequiredWithoutCreatedGroupsInput
  name: String
  description: String
  category: String
  topics: GroupUpdatetopicsInput
  image: String
  backgroundImage: String
  url: String
  participants: UserUpdateManyWithoutGroupsInput
}

input GroupUpdateWithoutCreatorDataInput {
  name: String
  description: String
  category: String
  topics: GroupUpdatetopicsInput
  image: String
  backgroundImage: String
  url: String
  participants: UserUpdateManyWithoutGroupsInput
  channels: ChannelUpdateManyWithoutGroupInput
}

input GroupUpdateWithoutParticipantsDataInput {
  creator: UserUpdateOneRequiredWithoutCreatedGroupsInput
  name: String
  description: String
  category: String
  topics: GroupUpdatetopicsInput
  image: String
  backgroundImage: String
  url: String
  channels: ChannelUpdateManyWithoutGroupInput
}

input GroupUpdateWithWhereUniqueWithoutCreatorInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutCreatorDataInput!
}

input GroupUpdateWithWhereUniqueWithoutParticipantsInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutParticipantsDataInput!
}

input GroupUpsertWithoutChannelsInput {
  update: GroupUpdateWithoutChannelsDataInput!
  create: GroupCreateWithoutChannelsInput!
}

input GroupUpsertWithWhereUniqueWithoutCreatorInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutCreatorDataInput!
  create: GroupCreateWithoutCreatorInput!
}

input GroupUpsertWithWhereUniqueWithoutParticipantsInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutParticipantsDataInput!
  create: GroupCreateWithoutParticipantsInput!
}

input GroupWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  creator: UserWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  backgroundImage: String
  backgroundImage_not: String
  backgroundImage_in: [String!]
  backgroundImage_not_in: [String!]
  backgroundImage_lt: String
  backgroundImage_lte: String
  backgroundImage_gt: String
  backgroundImage_gte: String
  backgroundImage_contains: String
  backgroundImage_not_contains: String
  backgroundImage_starts_with: String
  backgroundImage_not_starts_with: String
  backgroundImage_ends_with: String
  backgroundImage_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  participants_every: UserWhereInput
  participants_some: UserWhereInput
  participants_none: UserWhereInput
  channels_every: ChannelWhereInput
  channels_some: ChannelWhereInput
  channels_none: ChannelWhereInput
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
}

input GroupWhereUniqueInput {
  id: ID
  name: String
}

scalar Long

type Message {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: String!
  channel: Channel!
  author: User!
}

type MessageConnection {
  pageInfo: PageInfo!
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  id: ID
  content: String!
  channel: ChannelCreateOneWithoutMessagesInput!
  author: UserCreateOneWithoutMessagesInput!
}

input MessageCreateManyWithoutAuthorInput {
  create: [MessageCreateWithoutAuthorInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateManyWithoutChannelInput {
  create: [MessageCreateWithoutChannelInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateWithoutAuthorInput {
  id: ID
  content: String!
  channel: ChannelCreateOneWithoutMessagesInput!
}

input MessageCreateWithoutChannelInput {
  id: ID
  content: String!
  author: UserCreateOneWithoutMessagesInput!
}

type MessageEdge {
  node: Message!
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  content_ASC
  content_DESC
}

type MessagePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: String!
}

input MessageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
  NOT: [MessageScalarWhereInput!]
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
  AND: [MessageSubscriptionWhereInput!]
  OR: [MessageSubscriptionWhereInput!]
  NOT: [MessageSubscriptionWhereInput!]
}

input MessageUpdateInput {
  content: String
  channel: ChannelUpdateOneRequiredWithoutMessagesInput
  author: UserUpdateOneRequiredWithoutMessagesInput
}

input MessageUpdateManyDataInput {
  content: String
}

input MessageUpdateManyMutationInput {
  content: String
}

input MessageUpdateManyWithoutAuthorInput {
  create: [MessageCreateWithoutAuthorInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [MessageScalarWhereInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
}

input MessageUpdateManyWithoutChannelInput {
  create: [MessageCreateWithoutChannelInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutChannelInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutChannelInput!]
  deleteMany: [MessageScalarWhereInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
}

input MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput!
  data: MessageUpdateManyDataInput!
}

input MessageUpdateWithoutAuthorDataInput {
  content: String
  channel: ChannelUpdateOneRequiredWithoutMessagesInput
}

input MessageUpdateWithoutChannelDataInput {
  content: String
  author: UserUpdateOneRequiredWithoutMessagesInput
}

input MessageUpdateWithWhereUniqueWithoutAuthorInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutAuthorDataInput!
}

input MessageUpdateWithWhereUniqueWithoutChannelInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutChannelDataInput!
}

input MessageUpsertWithWhereUniqueWithoutAuthorInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutAuthorDataInput!
  create: MessageCreateWithoutAuthorInput!
}

input MessageUpsertWithWhereUniqueWithoutChannelInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutChannelDataInput!
  create: MessageCreateWithoutChannelInput!
}

input MessageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  channel: ChannelWhereInput
  author: UserWhereInput
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createChannel(data: ChannelCreateInput!): Channel!
  updateChannel(data: ChannelUpdateInput!, where: ChannelWhereUniqueInput!): Channel
  updateManyChannels(data: ChannelUpdateManyMutationInput!, where: ChannelWhereInput): BatchPayload!
  upsertChannel(where: ChannelWhereUniqueInput!, create: ChannelCreateInput!, update: ChannelUpdateInput!): Channel!
  deleteChannel(where: ChannelWhereUniqueInput!): Channel
  deleteManyChannels(where: ChannelWhereInput): BatchPayload!
  createGroup(data: GroupCreateInput!): Group!
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group
  updateManyGroups(data: GroupUpdateManyMutationInput!, where: GroupWhereInput): BatchPayload!
  upsertGroup(where: GroupWhereUniqueInput!, create: GroupCreateInput!, update: GroupUpdateInput!): Group!
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteManyGroups(where: GroupWhereInput): BatchPayload!
  createMessage(data: MessageCreateInput!): Message!
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateManyMessages(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): BatchPayload!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  channel(where: ChannelWhereUniqueInput!): Channel
  channels(where: ChannelWhereInput, orderBy: ChannelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Channel]!
  channelsConnection(where: ChannelWhereInput, orderBy: ChannelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChannelConnection!
  group(where: GroupWhereUniqueInput!): Group
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group]!
  groupsConnection(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupConnection!
  message(where: MessageWhereUniqueInput!): Message
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  channel(where: ChannelSubscriptionWhereInput): ChannelSubscriptionPayload
  group(where: GroupSubscriptionWhereInput): GroupSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  image: String
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
  createdGroups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
  channels(where: ChannelWhereInput, orderBy: ChannelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Channel!]
  createdChannels(where: ChannelWhereInput, orderBy: ChannelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Channel!]
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  image: String
  groups: GroupCreateManyWithoutParticipantsInput
  createdGroups: GroupCreateManyWithoutCreatorInput
  channels: ChannelCreateManyWithoutParticipantsInput
  createdChannels: ChannelCreateManyWithoutCreatorInput
  messages: MessageCreateManyWithoutAuthorInput
}

input UserCreateManyWithoutChannelsInput {
  create: [UserCreateWithoutChannelsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutGroupsInput {
  create: [UserCreateWithoutGroupsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutCreatedChannelsInput {
  create: UserCreateWithoutCreatedChannelsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCreatedGroupsInput {
  create: UserCreateWithoutCreatedGroupsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMessagesInput {
  create: UserCreateWithoutMessagesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutChannelsInput {
  id: ID
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  image: String
  groups: GroupCreateManyWithoutParticipantsInput
  createdGroups: GroupCreateManyWithoutCreatorInput
  createdChannels: ChannelCreateManyWithoutCreatorInput
  messages: MessageCreateManyWithoutAuthorInput
}

input UserCreateWithoutCreatedChannelsInput {
  id: ID
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  image: String
  groups: GroupCreateManyWithoutParticipantsInput
  createdGroups: GroupCreateManyWithoutCreatorInput
  channels: ChannelCreateManyWithoutParticipantsInput
  messages: MessageCreateManyWithoutAuthorInput
}

input UserCreateWithoutCreatedGroupsInput {
  id: ID
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  image: String
  groups: GroupCreateManyWithoutParticipantsInput
  channels: ChannelCreateManyWithoutParticipantsInput
  createdChannels: ChannelCreateManyWithoutCreatorInput
  messages: MessageCreateManyWithoutAuthorInput
}

input UserCreateWithoutGroupsInput {
  id: ID
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  image: String
  createdGroups: GroupCreateManyWithoutCreatorInput
  channels: ChannelCreateManyWithoutParticipantsInput
  createdChannels: ChannelCreateManyWithoutCreatorInput
  messages: MessageCreateManyWithoutAuthorInput
}

input UserCreateWithoutMessagesInput {
  id: ID
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  image: String
  groups: GroupCreateManyWithoutParticipantsInput
  createdGroups: GroupCreateManyWithoutCreatorInput
  channels: ChannelCreateManyWithoutParticipantsInput
  createdChannels: ChannelCreateManyWithoutCreatorInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  image_ASC
  image_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  image: String
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  firstName: String
  lastName: String
  email: String
  password: String
  image: String
  groups: GroupUpdateManyWithoutParticipantsInput
  createdGroups: GroupUpdateManyWithoutCreatorInput
  channels: ChannelUpdateManyWithoutParticipantsInput
  createdChannels: ChannelUpdateManyWithoutCreatorInput
  messages: MessageUpdateManyWithoutAuthorInput
}

input UserUpdateManyDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  image: String
}

input UserUpdateManyMutationInput {
  firstName: String
  lastName: String
  email: String
  password: String
  image: String
}

input UserUpdateManyWithoutChannelsInput {
  create: [UserCreateWithoutChannelsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutChannelsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutChannelsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutGroupsInput {
  create: [UserCreateWithoutGroupsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutGroupsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutGroupsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutCreatedChannelsInput {
  create: UserCreateWithoutCreatedChannelsInput
  update: UserUpdateWithoutCreatedChannelsDataInput
  upsert: UserUpsertWithoutCreatedChannelsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutCreatedGroupsInput {
  create: UserCreateWithoutCreatedGroupsInput
  update: UserUpdateWithoutCreatedGroupsDataInput
  upsert: UserUpsertWithoutCreatedGroupsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutMessagesInput {
  create: UserCreateWithoutMessagesInput
  update: UserUpdateWithoutMessagesDataInput
  upsert: UserUpsertWithoutMessagesInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutChannelsDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  image: String
  groups: GroupUpdateManyWithoutParticipantsInput
  createdGroups: GroupUpdateManyWithoutCreatorInput
  createdChannels: ChannelUpdateManyWithoutCreatorInput
  messages: MessageUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutCreatedChannelsDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  image: String
  groups: GroupUpdateManyWithoutParticipantsInput
  createdGroups: GroupUpdateManyWithoutCreatorInput
  channels: ChannelUpdateManyWithoutParticipantsInput
  messages: MessageUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutCreatedGroupsDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  image: String
  groups: GroupUpdateManyWithoutParticipantsInput
  channels: ChannelUpdateManyWithoutParticipantsInput
  createdChannels: ChannelUpdateManyWithoutCreatorInput
  messages: MessageUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutGroupsDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  image: String
  createdGroups: GroupUpdateManyWithoutCreatorInput
  channels: ChannelUpdateManyWithoutParticipantsInput
  createdChannels: ChannelUpdateManyWithoutCreatorInput
  messages: MessageUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutMessagesDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  image: String
  groups: GroupUpdateManyWithoutParticipantsInput
  createdGroups: GroupUpdateManyWithoutCreatorInput
  channels: ChannelUpdateManyWithoutParticipantsInput
  createdChannels: ChannelUpdateManyWithoutCreatorInput
}

input UserUpdateWithWhereUniqueWithoutChannelsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutChannelsDataInput!
}

input UserUpdateWithWhereUniqueWithoutGroupsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutGroupsDataInput!
}

input UserUpsertWithoutCreatedChannelsInput {
  update: UserUpdateWithoutCreatedChannelsDataInput!
  create: UserCreateWithoutCreatedChannelsInput!
}

input UserUpsertWithoutCreatedGroupsInput {
  update: UserUpdateWithoutCreatedGroupsDataInput!
  create: UserCreateWithoutCreatedGroupsInput!
}

input UserUpsertWithoutMessagesInput {
  update: UserUpdateWithoutMessagesDataInput!
  create: UserCreateWithoutMessagesInput!
}

input UserUpsertWithWhereUniqueWithoutChannelsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutChannelsDataInput!
  create: UserCreateWithoutChannelsInput!
}

input UserUpsertWithWhereUniqueWithoutGroupsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutGroupsDataInput!
  create: UserCreateWithoutGroupsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  groups_every: GroupWhereInput
  groups_some: GroupWhereInput
  groups_none: GroupWhereInput
  createdGroups_every: GroupWhereInput
  createdGroups_some: GroupWhereInput
  createdGroups_none: GroupWhereInput
  channels_every: ChannelWhereInput
  channels_some: ChannelWhereInput
  channels_none: ChannelWhereInput
  createdChannels_every: ChannelWhereInput
  createdChannels_some: ChannelWhereInput
  createdChannels_none: ChannelWhereInput
  messages_every: MessageWhereInput
  messages_some: MessageWhereInput
  messages_none: MessageWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
